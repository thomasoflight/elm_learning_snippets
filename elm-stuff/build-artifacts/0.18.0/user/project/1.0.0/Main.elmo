var _user$project$Main$unionFn = function (thing) {
	var _p0 = thing;
	switch (_p0.ctor) {
		case 'AString':
			return A2(_elm_lang$core$Basics_ops['++'], 'It was a string: ', _p0._0);
		case 'AnInt':
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'It was an integer: ',
				_elm_lang$core$Basics$toString(_p0._0));
		default:
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'It was a tuple to unpack with values: ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_p0._0._0,
					A2(
						_elm_lang$core$Basics_ops['++'],
						' ',
						_elm_lang$core$Basics$toString(_p0._0._1))));
	}
};
var _user$project$Main$ATuple = function (a) {
	return {ctor: 'ATuple', _0: a};
};
var _user$project$Main$AnInt = function (a) {
	return {ctor: 'AnInt', _0: a};
};
var _user$project$Main$AString = function (a) {
	return {ctor: 'AString', _0: a};
};
var _user$project$Main$main = _elm_lang$virtual_dom$Native_VirtualDom.staticProgram(
	A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				_user$project$Main$unionFn(
					_user$project$Main$AString('baby'))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text(
						_user$project$Main$unionFn(
							_user$project$Main$AnInt(30))),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_user$project$Main$unionFn(
									_user$project$Main$ATuple(
										{ctor: '_Tuple2', _0: 'baby', _1: 30}))),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}));
